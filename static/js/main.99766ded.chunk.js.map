{"version":3,"sources":["component/ActionMenu.tsx","component/Luckysheet.js","App.tsx","serviceWorker.js","index.tsx"],"names":["ActionMenu","props","broker","clientId","Math","random","toFixed","seed","SHA256","toString","slice","this","editMode","setEditMode","key","createKey","channel","console","log","dataString","JSON","stringify","getData","message","AES","encrypt","mqttMessage","mqtt","destinationName","retained","client","connect","onSuccess","event","send","keyFormatted","substr","setTimeout","disconnect","alert","prompt","replaceAll","onMessageArrived","data","decrypt","payloadString","json","parse","Utf8","saveData","error","subscribe","eval","localStorage","clear","headerTitle","menuButton","onClick","handleHeaderClick","handleUploadClick","handleDownloadClick","handlRefreshClick","styles","color","handleDeleteClick","React","Component","Luckysheet","state","luckysheet","screenWidth","window","innerWidth","numOfColumns","getSheetData","length","columnWidth","floor","columnsWidth","i","getColumnsWidth","setColumnWidth","document","getElementsByClassName","children","style","width","options","rows","visibledatarow","columns","visibledatacolumn","container","enableAddRow","enableAddBackTop","showinfobar","showstatisticBar","showsheetbarConfig","menu","row","column","showtoolbar","sheetFormulaBar","allowCopy","columnHeaderHeight","rowHeaderWidth","hook","workbookCreateAfter","resizeColumnsToScreenWidth","showGridLines","hideGridLines","updated","getAllSheets","create","buildLuckysheet","modeClassname","id","className","margin","padding","position","bottom","left","top","defaultWorkbook","App","useState","setData","storedData","getItem","_data","refresh","setItem","mode","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.99766ded.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Menu,\n    MenuItem,\n    MenuButton,\n    MenuDivider\n} from '@szhsin/react-menu';\nimport '@szhsin/react-menu/dist/index.css';\n\nimport '../styles/actionmenu.css';\n\nimport { FiSettings } from 'react-icons/fi';\n\nimport * as mqtt from 'paho-mqtt';\n\nimport AES from 'crypto-js/aes';\nimport SHA256 from 'crypto-js/sha256';\nimport random from 'crypto-js/lib-typedarrays'\nimport Utf8 from 'crypto-js/enc-utf8';\n\ninterface IProps {\n    editMode: boolean;\n    setEditMode: Function;\n    saveData: Function;\n    getData: Function;\n}\n\nexport class ActionMenu extends React.Component<IProps> {\n    private broker: string = \"wss://broker.emqx.io:8084/mqtt\";\n    private clientId: string = \"client-\" + Math.random().toFixed(5);\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    private createKey() {\n        const seed = random.random(16);\n        const sha256 = SHA256(seed).toString();\n        const key = sha256.slice(0, 9)\n        return key;\n    }\n\n    handleHeaderClick() {\n        if (this.props.editMode) {\n            this.props.setEditMode(false);\n        }\n        else {\n            this.props.setEditMode(true);\n        }\n    }\n\n    handleUploadClick() {\n        const key = this.createKey();\n        const channel = key + \"-channel\";\n        console.log(channel)\n\n        const dataString = JSON.stringify(this.props.getData());\n\n        const message = AES.encrypt(dataString, key);\n\n        const mqttMessage = new mqtt.Message(message.toString());\n        mqttMessage.destinationName = channel;\n        mqttMessage.retained = true;\n\n        const client = new mqtt.Client(this.broker, this.clientId);\n\n        client.connect({\n            onSuccess: (event) => {\n                client.send(mqttMessage);\n\n                const keyFormatted = key.substr(0,3) + '-' + key.substr(3, 3) + \"-\" + key.substr(6, 3);\n\n                setTimeout(() => {\n                    client.disconnect();\n                }, 5000);\n\n                alert(`Uploaded workbook. The key is ${keyFormatted}`);\n            }\n        });\n    }\n\n    handleDownloadClick() {\n        const keyPrompt: string = prompt(\"Please enter the 9 character key:\") as string;\n        const key = keyPrompt.replaceAll(\"-\", \"\");\n        const channel = key + \"-channel\";\n\n        const client = new mqtt.Client(this.broker, this.clientId);\n        \n        client.onMessageArrived = (message: mqtt.Message) => {\n            try {\n                const data = AES.decrypt(message.payloadString, key);\n                const json = JSON.parse(data.toString(Utf8));\n\n                // Delete retained message\n                const mqttMessage = new mqtt.Message(\"\");\n                mqttMessage.destinationName = channel;\n                mqttMessage.retained = true;\n                client.send(mqttMessage);\n\n                this.props.saveData(json, true);\n\n            } catch (error) {\n                alert(\"Invalid key provided, please try again.\");\n            }\n\n            client.disconnect();\n        };\n    \n        client.connect({\n            onSuccess: (event) => {\n                console.log(\"connected\")\n                client.subscribe(channel);\n\n                setTimeout(() => {\n                    alert(\"No data is available for download, try uploading again.\");\n                    client.disconnect();\n                }, 5000);\n            }\n        });\n    }\n\n    handlRefreshClick() {\n        eval('luckysheet.refreshFormula()');\n    }\n\n    handleDeleteClick() {\n        localStorage.clear();\n        this.props.saveData(null, true);\n    }\n    \n    render() {\n        const headerTitle = this.props.editMode ? \"Live Mode\" : \"Edit Mode\";\n        return (\n            <Menu menuButton={<MenuButton><FiSettings /></MenuButton>}>\n                <MenuItem onClick={() => {this.handleHeaderClick()}}>{headerTitle}</MenuItem>\n                <MenuDivider />\n                <MenuItem onClick={() => {this.handleUploadClick()}}>Upload</MenuItem>\n                <MenuItem onClick={() => {this.handleDownloadClick()}}>Download</MenuItem>\n                <MenuItem onClick={() => {this.handlRefreshClick()}}>Refresh</MenuItem>\n                <MenuDivider />\n                <MenuItem styles={{color: \"red\"}} onClick={() => {this.handleDeleteClick()}}>Delete data</MenuItem>\n            </Menu>\n        )\n    }\n}","import React from 'react';\n\nimport '../styles/luckysheet.css'\n\nclass Luckysheet extends React.Component {\n    state = { editMode: this.props.editMode };\n\n\n    getColumnsWidth(luckysheet) {\n        const screenWidth = window.innerWidth;\n        const numOfColumns = luckysheet.getSheetData()[0].length; // TODO: Should check if entry is available\n        const columnWidth = Math.floor(screenWidth / numOfColumns);\n\n        let columnsWidth = {};\n\n        for(let i = 0; i < numOfColumns; i++) {\n            columnsWidth[i] = columnWidth;\n        }\n\n        return columnsWidth;\n    }\n\n    resizeColumnsToScreenWidth(luckysheet) {\n        const columnsWidth = this.getColumnsWidth(luckysheet);\n        luckysheet.setColumnWidth(columnsWidth);\n\n        const scrollbar = document.getElementsByClassName(\"luckysheet-scrollbar-x\");\n        scrollbar[0].children[0].style.width = window.innerWidth.toString() + \"px\";\n\n    }\n\n    buildLuckysheet() {\n        let options = {};\n\n        const data = this.props.data;\n\n        const rows = data[0].visibledatarow.length;\n        const columns = data[0].visibledatacolumn.length;\n\n        if (this.props.editMode) {\n            options = {\n                data: this.props.data,\n                container: 'luckysheet',\n                enableAddRow: false,\n                enableAddBackTop: false,\n                // showtoolbar: false,\n                showinfobar: false,\n                // sheetFormulaBar: false,\n                showstatisticBar: false,\n                showsheetbarConfig:{\n                    // add: false,\n                    menu: false,\n                },\n                row: rows,\n                column: columns,\n            }\n        }\n        else {\n            //Configuration item\n            options = {\n                data: data,\n                container: 'luckysheet',\n                enableAddRow: false,\n                enableAddBackTop: false,\n                showtoolbar: false,\n                showinfobar: false,\n                sheetFormulaBar: false,\n                showstatisticBar: false,\n                allowCopy: false,\n                showsheetbarConfig:{\n                    // add: false,\n                    menu: false,\n                },\n                row: rows,\n                column: columns,\n                columnHeaderHeight: 0,\n                rowHeaderWidth: 0\n             }\n        }\n\n        options.hook = {\n            workbookCreateAfter: (json) => {\n                this.resizeColumnsToScreenWidth(luckysheet);\n\n                if (!this.props.editMode) {\n                    luckysheet.hideGridLines();\n                }\n                else {\n                    luckysheet.showGridLines();\n                }\n            },\n            updated: () => {\n                this.props.saveData(luckysheet.getAllSheets());\n            },\n        }\n\n        const luckysheet = window.luckysheet;\n        luckysheet.create(options);\n\n        // window.luckysheet_function.JSON = luckysheet_json_function(luckysheet);\n    }\n\n    componentDidUpdate() {\n        this.buildLuckysheet();\n    }\n\n    componentDidMount() {\n        this.buildLuckysheet();\n    }\n\n    render() {\n        const luckyCss = {\n            margin: '0px',\n            padding: '0px',\n            position: 'absolute',\n            width: '100%',\n            bottom: '0px',\n            left: '0px',\n            top: '0px',\n        }\n\n        const modeClassname = this.props.editMode ? \"editMode\" : \"liveMode\";\n\n        return (\n            <div\n            id=\"luckysheet\"\n            className={modeClassname}\n            style={luckyCss}\n            ></div>\n        )\n    }\n}\n\nexport default Luckysheet","import React, { useState } from 'react';\nimport './App.css';\nimport Luckysheet from './component/Luckysheet'\nimport { ActionMenu } from './component/ActionMenu';\n\nconst defaultWorkbook = [{ \"name\": \"Sheet1\", color: \"\", \"status\": \"1\", \"order\": \"0\", \"data\": [], \"config\": {}, \"index\":0, \"visibledatarow\": [[],[],[]], \"visibledatacolumn\": [[],[],[]] }];\n\nfunction App() {\n    const [data, setData] = useState(getData());\n    const [editMode, setEditMode] = useState(false);\n\n    function getData(): any {\n        const storedData = localStorage.getItem(\"luckysheet-data\");\n\n        if (storedData) {\n            try {\n                return JSON.parse(storedData);   \n            } catch (error) {\n                console.error(\"Error parsing localStorage data\", error);\n            }\n        }\n\n        return defaultWorkbook;\n    }\n\n    function saveData(_data: any, refresh: boolean = false) {\n        if (_data == null) {\n            _data = defaultWorkbook;\n        }\n\n        const dataString = JSON.stringify(_data);\n        localStorage.setItem(\"luckysheet-data\", dataString);\n\n        if (refresh) {\n            setData(getData()); \n        }\n    }\n\n    function setMode(mode: boolean) {\n        setData(getData());\n        setEditMode(mode);\n    }\n\n    return (\n        <div className=\"App\">\n            <Luckysheet data={data} editMode={editMode} saveData={saveData}/>\n            <ActionMenu editMode={editMode} setEditMode={setMode} saveData={saveData} getData={getData}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}