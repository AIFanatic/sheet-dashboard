[{"/home/ubuntu/Downloads/temp/luckysheet-react/src/index.tsx":"1","/home/ubuntu/Downloads/temp/luckysheet-react/src/serviceWorker.js":"2","/home/ubuntu/Downloads/temp/luckysheet-react/src/App.tsx":"3","/home/ubuntu/Downloads/temp/luckysheet-react/src/component/Luckysheet.js":"4","/home/ubuntu/Downloads/temp/luckysheet-react/src/component/ActionMenu.tsx":"5"},{"size":462,"mtime":1610083538573,"results":"6","hashOfConfig":"7"},{"size":5086,"mtime":1609990881076,"results":"8","hashOfConfig":"7"},{"size":1915,"mtime":1610415751451,"results":"9","hashOfConfig":"7"},{"size":3679,"mtime":1610362375215,"results":"10","hashOfConfig":"7"},{"size":4979,"mtime":1610427216138,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"wbffcv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/home/ubuntu/Downloads/temp/luckysheet-react/src/index.tsx",[],["25","26"],"/home/ubuntu/Downloads/temp/luckysheet-react/src/serviceWorker.js",[],["27","28"],"/home/ubuntu/Downloads/temp/luckysheet-react/src/App.tsx",[],"/home/ubuntu/Downloads/temp/luckysheet-react/src/component/Luckysheet.js",[],"/home/ubuntu/Downloads/temp/luckysheet-react/src/component/ActionMenu.tsx",["29","30","31"],"import React from 'react';\nimport {\n    Menu,\n    MenuItem,\n    MenuButton,\n    MenuDivider\n} from '@szhsin/react-menu';\nimport '@szhsin/react-menu/dist/index.css';\n\nimport '../styles/actionmenu.css';\n\nimport { FiSettings, FiCopy } from 'react-icons/fi';\n\n// import * as mqtt from 'paho-mqtt';\n\nimport AES from 'crypto-js/aes';\nimport SHA256 from 'crypto-js/sha256';\nimport random from 'crypto-js/lib-typedarrays'\nimport Utf8 from 'crypto-js/enc-utf8';\n\n// import * as mqtt from 'mqtt'\nimport Peer from 'peerjs';\n\nimport { toast } from 'react-toastify';\n\nimport '../styles/alert.css';\n\nimport copy from 'copy-to-clipboard';\n\ninterface IProps {\n    editMode: boolean;\n    setEditMode: Function;\n    saveData: Function;\n    getData: Function;\n}\n\ninterface IState {\n    isAlertOpen: boolean;\n}\n\nfunction uploadAlertTemplate(key: string) {\n    const keyFormatted = key.substr(0,3) + '-' + key.substr(3, 3) + \"-\" + key.substr(6, 3);\n\n    return (\n        <div className=\"alert\">\n            <span className=\"title\"> <span className=\"title-icon\">ðŸ›ˆ</span> Ready to upload workbook.</span>\n            <p className=\"text\">Download using the following key</p>\n            <p className=\"button-box\">\n                <button onClick={() => {\n                    copy(keyFormatted);\n                    toast(\"Copied to clipboard!\", {\n                        autoClose: 2000,\n                        type: \"success\"\n                    });\n                }}>\n                        {keyFormatted}\n                        <FiCopy className=\"button-icon\"/>\n                </button>\n            </p>\n        </div>\n    )\n}\n\nexport class ActionMenu extends React.Component<IProps, IState> {\n    private broker: string = \"wss://test.mosquitto.org:8081\";\n\n    state: IState = {\n        isAlertOpen: true,\n    };\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    private createKey() {\n        const seed = random.random(16);\n        const sha256 = SHA256(seed).toString();\n        const key = sha256.slice(0, 9)\n        return key;\n    }\n\n    handleHeaderClick() {\n        if (this.props.editMode) {\n            this.props.setEditMode(false);\n        }\n        else {\n            this.props.setEditMode(true);\n        }\n    }\n\n    createChannelFromKey(key: string): string {\n        const sha256 = SHA256(key).toString();\n        const channel = sha256.slice(0, 9)\n        return channel;\n    }\n\n    handleUploadClick() {\n        const key = this.createKey();\n        const channel = this.createChannelFromKey(key);\n\n        var peer = new Peer(\"sheet-dashboard-sender-\" + channel);\n\n        peer.on('open', (id) => {\n            peer.on('connection', (conn) => {\n                conn.on('open', () => {\n                    const dataString = JSON.stringify(this.props.getData());\n                    const message = AES.encrypt(dataString, key);\n\n                    conn.send(message.toString());\n                });\n            });\n\n            const keyFormatted = key.substr(0,3) + '-' + key.substr(3, 3) + \"-\" + key.substr(6, 3);\n            // toast(`Uploaded workbook. <p>The key is ${keyFormatted}</p>`);\n            toast(uploadAlertTemplate(key));\n        });\n    }\n\n    handleDownloadClick() {\n        const keyPrompt: string = prompt(\"Please enter the 9 character key:\") as string;\n        const key = keyPrompt.replaceAll(\"-\", \"\");\n        const channel = this.createChannelFromKey(key);\n\n        var peer = new Peer(\"sheet-dashboard-receiver-\" + channel);\n\n        peer.on('open', (id) => {\n            var conn = peer.connect(\"sheet-dashboard-sender-\" + channel);\n\n            conn.on('open', () => {\n                // Receive messages\n                conn.on('data', (data) => {\n                    const dataDecrypted = AES.decrypt(data.toString(), key);\n                    const json = JSON.parse(dataDecrypted.toString(Utf8));\n\n                    this.props.saveData(json, true);\n                });\n            });\n        });\n    }\n\n    handlRefreshClick() {\n        eval('luckysheet.refreshFormula()');\n    }\n\n    handleDeleteClick() {\n        localStorage.clear();\n        this.props.saveData(null, true);\n    }\n    \n    render() {\n        const headerTitle = this.props.editMode ? \"Live Mode\" : \"Edit Mode\";\n        return (\n            <div>\n                <Menu menuButton={<MenuButton><FiSettings /></MenuButton>}>\n                    <MenuItem onClick={() => {this.handleHeaderClick()}}>{headerTitle}</MenuItem>\n                    <MenuDivider />\n                    <MenuItem onClick={() => {this.handleUploadClick()}}>Upload</MenuItem>\n                    <MenuItem onClick={() => {this.handleDownloadClick()}}>Download</MenuItem>\n                    <MenuItem onClick={() => {this.handlRefreshClick()}}>Refresh</MenuItem>\n                    <MenuDivider />\n                    <MenuItem styles={{color: \"red\"}} onClick={() => {this.handleDeleteClick()}}>Delete data</MenuItem>\n                </Menu>\n            </div>\n        )\n    }\n}",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":71,"column":5,"nodeType":"38","messageId":"39","endLine":73,"endColumn":6},{"ruleId":"40","severity":1,"message":"41","line":113,"column":19,"nodeType":"42","messageId":"43","endLine":113,"endColumn":31},{"ruleId":"44","severity":1,"message":"45","line":142,"column":9,"nodeType":"46","messageId":"47","endLine":142,"endColumn":13},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","@typescript-eslint/no-unused-vars","'keyFormatted' is assigned a value but never used.","Identifier","unusedVar","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]